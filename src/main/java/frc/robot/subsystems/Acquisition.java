// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import frc.robot.RobotContainer;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Acquisition extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid intakeLeftSolenoid;
    private DigitalInput noteDetectorAcquisition;
    private DigitalInput intakeInSwitch;
    private PWMSparkMax bottomShaft;
    private PWMSparkMax topShaft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double intakeGearRatio = Constants.MaxRPMConstants.maxRPMNeo550 / 7;

    /**
    *
    */
    public Acquisition() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLeftSolenoid = new DoubleSolenoid(20, PneumaticsModuleType.REVPH, 10, 11);
        addChild("intakeSolenoid", intakeLeftSolenoid);

        noteDetectorAcquisition = new DigitalInput(1);
        addChild("noteDetectorAcquisition", noteDetectorAcquisition);

        intakeInSwitch = new DigitalInput(0);
        addChild("intakeInSwitch", intakeInSwitch);

        bottomShaft = new PWMSparkMax(0);
        addChild("bottomShaft", bottomShaft);
        bottomShaft.setInverted(true);

        topShaft = new PWMSparkMax(1);
        addChild("topShaft", topShaft);
        topShaft.setInverted(true);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLeftSolenoid.set(Value.kReverse);
    }

    @Override
    public void periodic() {
        SmartDashboard.putBoolean("Note in Intake", isNoteInAcquisition());
        SmartDashboard.putBoolean("Intake Stored", isIntakeRetracted());

        // This method will be called once per scheduler run
        if (readyToTransfer()) {
            bottomShaft.set(Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
            topShaft.set(Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
        }
        if (!isIntakeRetracted() && isNoteInAcquisition()) {
            stopBoth();
            retractIntake();
        }
        SmartDashboard.putNumber("Pressure", RobotContainer.getInstance().ph.getPressure(0));
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void deployIntake() {
        if (RobotContainer.getInstance().ph.getPressure(0) >= 45){
            intakeLeftSolenoid.set(Value.kForward);
        }
    }

    public void retractIntake() {
        intakeLeftSolenoid.set(Value.kReverse);
    }

    public void runIntakeIn() {
        if (isNoteInAcquisition()) {
            stopBoth();
            RobotContainer.getInstance().driver.getHID().setRumble(RumbleType.kBothRumble, 1);
        } else {
            bottomShaft.set(Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
            topShaft.set(Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
        }
    }

    public void stopBoth() {
        bottomShaft.set(0);
        topShaft.set(0);
    }

    public boolean readyToTransfer() {
        return isNoteInAcquisition() && isIntakeRetracted();
    }

    public boolean isNoteInAcquisition() {
        return noteDetectorAcquisition.get();
    }

    public boolean isIntakeRetracted() {
        return !intakeInSwitch.get();
    }

    public void runIntakeOut() {
            bottomShaft.set(-Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
            topShaft.set(-Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
    }
        public void runBoth() {
            bottomShaft.set(Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
            topShaft.set(Constants.AcquisitionConstants.floorIntakeRPM / intakeGearRatio);
    }
}
